type Query {
  info: String!
  feed(filter: String, skip: Int, take: Int, orderBy: LinkOrderByInput): Feed!
  allFactions: [Faction!]!
}

type Mutation {
  post(url: String!, description: String!): Link!
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  vote(linkId: ID!): Vote

  addFaction(name: String!, description: String!): Faction!
  updateFaction(id: ID!, name: String, description: String): Faction!
  deleteFaction(id: ID!): Faction!

  addRace(name: String!, description: String!, leader: String, factionId: ID!): Race!
  updateRace(id: ID!, name: String, description: String, factionId: ID!): Race!
  deleteRace(id: ID!): Race!

  addLeader(name: String!, description: String!, raceId: ID!): Leader!
  updateLeader(id: ID!, name: String, description: String): Leader!
  deleteLeader(id: ID!): Leader!

  addRacial(name: String!, benefit: String!, raceId: ID!): Racial!
  updateRacial(id: ID!, name: String, benefit: String, raceId: ID!): Racial!
  deleteRacial(id: ID!): Racial!
}

type Subscription {
  newLink: Link
  newVote: Vote
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
}

type Feed {
  links: [Link!]!
  count: Int!
}

type Link {
  id: ID!
  description: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}

input LinkOrderByInput {
  description: Sort
  url: Sort
  createdAt: Sort
}

enum Sort {
  asc
  desc
}

type Faction {
  id: ID!
  name: String!
  description: String!
  races: [Race!]
}

type Race {
  id: ID!
  name: String!
  description: String!
  leader: Leader
  racials: [Racial]
  loyalTo: Faction!
}

type Leader {
  id: ID!
  name: String!
  description: String!
  people: Race
}

type Racial {
  id: ID!
  name: String!
  benefit: String!
  race: Race!
}